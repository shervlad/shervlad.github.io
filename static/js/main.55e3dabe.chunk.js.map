{"version":3,"sources":["components/mazeSolverProject.jsx","components/harvestRProject.jsx","components/projects.jsx","App.js","serviceWorker.js","index.js"],"names":["MazeSolverProject","className","src","frameborder","allow","allowfullscreen","width","height","mozallowfullscreen","webkitallowfullscreen","Component","HarvestRProject","Projects","Tab","Container","id","defaultActiveKey","Row","Col","lg","Nav","variant","Item","to","activeStyle","border","padding","borderRadius","exact","Content","path","component","App","basename","process","borderBottom","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0TAIqBA,E,uKAEjB,OACE,6BACE,gEACA,yBAAKC,UAAU,iBACb,4BAAQA,UAAU,cAAcC,IAAI,4CAA4CC,YAAY,IAAIC,MAAM,0EAA0EC,iBAAe,KAIjM,yBAAKJ,UAAU,iBACb,4BAAQA,UAAU,cAAcC,IAAI,4KAA4KC,YAAY,IAAIG,MAAM,MAAMC,OAAO,MAAMF,gBAAgB,OAAOG,mBAAmB,OAAOC,sBAAsB,e,GAX3RC,aCA1BC,E,uKAEjB,OACE,6BACE,4F,GAJqCD,aCCxBE,E,uKAEjB,OACI,kBAACC,EAAA,EAAIC,UAAL,CAAeC,GAAG,oBAAoBC,iBAAiB,SACnD,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAKC,GAAI,GACT,kBAACC,EAAA,EAAD,CAAKC,QAAQ,OAAOpB,UAAU,eAC1B,kBAACmB,EAAA,EAAIE,KAAL,KACI,kBAAC,IAAD,CAAWC,GAAG,wBAAwBtB,UAAU,uBACrCuB,YAAa,CACRC,OAAQ,kBACRC,QAAS,MACTC,aAAc,QAElBC,OAAK,GANjB,gBAWJ,kBAACR,EAAA,EAAIE,KAAL,KACI,kBAAC,IAAD,CAAWC,GAAG,qBAAqBtB,UAAU,uBAClCuB,YAAa,CACRC,OAAQ,kBACRC,QAAS,MACTC,aAAc,QAElBC,OAAK,GANjB,eAYR,kBAACV,EAAA,EAAD,CAAKC,GAAI,GACT,kBAACN,EAAA,EAAIgB,QAAL,KACI,kBAAC,IAAD,CAAOC,KAAK,wBAAwBC,UAAW/B,EAAmB4B,OAAK,IACvE,kBAAC,IAAD,CAAOE,KAAK,qBAAqBC,UAAWpB,EAAiBiB,OAAK,Y,GAnChDlB,a,MCsCvBsB,MApCf,WAEE,OACE,kBAAC,IAAD,CAAQC,SAAUC,IAChB,yBAAKjC,UAAU,sBACb,yBAAKA,UAAU,UACf,yBAAKA,UAAU,QACb,6CAEF,yBAAKA,UAAU,SACT,yBAAKA,UAAU,qBACf,kBAAC,IAAD,CAASsB,GAAG,UAAUtB,UAAU,UAAUuB,YAAa,CAACW,aAAc,kBAAmBT,QAAS,QAAlG,WAIA,yBAAKzB,UAAU,qBACf,kBAAC,IAAD,CAASsB,GAAG,YAAYtB,UAAU,UAAUuB,YAAa,CAACW,aAAc,kBAAmBT,QAAS,QAApG,aAIA,yBAAKzB,UAAU,qBACf,kBAAC,IAAD,CAASsB,GAAG,QAAQtB,UAAU,UAAUuB,YAAa,CAACW,aAAc,kBAAmBT,QAAS,QAAhG,WAQJ,kBAAC,IAAD,CAAOI,KAAK,YAAYC,UAAWnB,OCxBzBwB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.55e3dabe.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport * as ReactBootstrap from 'react-bootstrap';\r\nimport {BrowserRouter as Router, Link, Route, NavLink} from 'react-router-dom';\r\n\r\nexport default class MazeSolverProject extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h2> Wall3D: Maze Solving Challenge </h2>\r\n        <div className=\"video-wrapper\">\r\n          <iframe className=\"video-frame\" src=\"https://www.youtube.com/embed/PrP86YrPoR0\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\r\n        </div>\r\n\r\n\r\n        <div className=\"video-wrapper\">\r\n          <iframe className=\"video-frame\" src=\"https://docs.google.com/presentation/d/e/2PACX-1vTqXaYhTXgwJ_DPO3bpJjTPzB6wHcrB4mNkEAurd-2MHXkMApfmxKwZkfwkg2wChygbciwCbMuz_3Cd/embed?start=false&loop=false&delayms=3000\" frameborder=\"0\" width=\"960\" height=\"569\" allowfullscreen=\"true\" mozallowfullscreen=\"true\" webkitallowfullscreen=\"true\"></iframe>\r\n\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\n\r\n\r\n","import React, { Component } from 'react'\r\nimport * as ReactBootstrap from 'react-bootstrap';\r\nimport {BrowserRouter as Router, Link, Route, NavLink} from 'react-router-dom';\r\n\r\nexport default class HarvestRProject extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h2>HarvesR: using reinforcement learning for fruit picking</h2>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\n\r\n\r\n","import React, { Component } from 'react'\r\nimport {Tab, Col, Row, Nav} from 'react-bootstrap';\r\nimport {BrowserRouter as Router, Link, Route, NavLink} from 'react-router-dom';\r\nimport MazeSolverProject from './mazeSolverProject';\r\nimport HarvestRProject from './harvestRProject';\r\nexport default class Projects extends Component {\r\n  render() {\r\n    return (\r\n        <Tab.Container id=\"left-tabs-example\" defaultActiveKey=\"first\">\r\n            <Row>\r\n                <Col lg={3}>\r\n                <Nav variant=\"tabs\" className=\"flex-column\">\r\n                    <Nav.Item>\r\n                        <NavLink   to=\"/projects/maze_solver\" className=\"navlink navlink-left\"\r\n                                   activeStyle={{\r\n                                        border: '1px solid black', \r\n                                        padding: '2px',\r\n                                        borderRadius: '10px'\r\n                                        }}\r\n                                    exact>\r\n                                    Maze Solver\r\n                                    \r\n                        </NavLink>\r\n                    </Nav.Item>\r\n                    <Nav.Item>\r\n                        <NavLink   to=\"/projects/harvestr\" className=\"navlink navlink-left\"\r\n                                   activeStyle={{\r\n                                        border: '1px solid black', \r\n                                        padding: '2px',\r\n                                        borderRadius: '10px'\r\n                                        }}\r\n                                    exact>\r\n                        HarvestR\r\n                        </NavLink>\r\n                    </Nav.Item>\r\n                </Nav>\r\n                </Col>\r\n                <Col lg={9}>\r\n                <Tab.Content>\r\n                    <Route path=\"/projects/maze_solver\" component={MazeSolverProject} exact/>\r\n                    <Route path=\"/projects/harvestr\" component={HarvestRProject} exact/>\r\n                </Tab.Content>\r\n                </Col>\r\n            </Row>\r\n        </Tab.Container>\r\n    )\r\n  }\r\n}\r\n\r\n\r\n\r\n","import React from 'react';\nimport './App.css';\n// import Navbar from './components/navbar';\nimport Projects from './components/projects';\nimport {BrowserRouter as Router, Link, Route, NavLink} from 'react-router-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport * as ReactBootstrap from 'react-bootstrap';\nfunction App() {\n  var activelink=0;\n  return (\n    <Router basename={process.env.PUBLIC_URL}>\n      <div className=\"App main-container\">\n        <div className=\"navbar\">\n        <div className=\"left\">\n          <h2>Vlad Seremet</h2>\n        </div>\n        <div className=\"right\">\n              <div className=\"navlink-container\"> \n              <NavLink to=\"/resume\" className=\"navlink\" activeStyle={{borderBottom: '1px solid black', padding: '2px'}}> \n                Resume \n              </NavLink>\n              </div>\n              <div className=\"navlink-container\"> \n              <NavLink to=\"/projects\" className=\"navlink\" activeStyle={{borderBottom: 'solid 1px black', padding: '2px'}} > \n              Projects\n              </NavLink>\n              </div>\n              <div className=\"navlink-container\"> \n              <NavLink to=\"/blog\" className=\"navlink\" activeStyle={{borderBottom: 'solid 1px black', padding: '2px'}}> \n                Blog\n              </NavLink>\n              </div>\n\n        </div>\n\n        </div>\n          <Route path='/projects' component={Projects}/>\n      </div>\n    </Router>\n  );\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}